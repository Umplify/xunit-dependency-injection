variables:
  Major: 9
  Minor: 2
  Revision: 0
  BuildConfiguration: Release

name: $(Major).$(Minor).$(Revision)
pr: none
trigger:
  batch: true
  tags:
   include:
     - refs/tags/*
  paths:
    exclude:
      - examples/*
      - README.md

pool:
  vmImage: 'ubuntu-22.04'

steps:
- script: echo Build Number $(name)
- task: UseDotNet@2
  displayName: 'Use .NET 9.0 sdk'
  inputs:
    packageType: sdk
    version: 9.0.304
    installationPath: $(Agent.ToolsDirectory)/dotnet
- script: echo Started restoring the source code
- task: DotNetCoreCLI@2
  displayName: 'Restoring'
  inputs:
    command: 'restore'
    projects: '**/Xunit.Microsoft.DependencyInjection.csproj'
    feedsToUse: 'select'
- script: echo Started building the source code
- task: DotNetCoreCLI@2
  displayName: 'Building'
  inputs:
    command: 'build'
    projects: '**/Xunit.Microsoft.DependencyInjection.csproj'
    arguments: '--configuration $(BuildConfiguration)'

# Pack (with symbols & SourceLink) happens before publish to ensure packages are available as build artifacts
- script: echo Packing library with symbols and SourceLink metadata - Version $(Major).$(Minor).$(Revision)
  displayName: 'Pre-Pack Info'
- task: DotNetCoreCLI@2
  displayName: 'Packing (nupkg + snupkg)'
  inputs:
    command: 'pack'
    packagesToPack: '**/Xunit.Microsoft.DependencyInjection.csproj'
    arguments: '--configuration $(BuildConfiguration) /p:ContinuousIntegrationBuild=true /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg /p:Version=$(Major).$(Minor).$(Revision)'
    outputDir: '$(Build.ArtifactStagingDirectory)/packages'
    nobuild: false
- task: DotNetCoreCLI@2
  displayName: 'Running tests in example folder'
  continueOnError: true
  inputs:
    command: 'test'
    projects: '**/examples/Xunit.Microsoft.DependencyInjection.ExampleTests'
    arguments: '--configuration $(BuildConfiguration)'
    testRunTitle: 'Running sample tests'
    
- script: echo Started publishing
- task: DotNetCoreCLI@2
  displayName: 'Publishing'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/Xunit.Microsoft.DependencyInjection.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
- script: echo Started dropping
- task: PublishBuildArtifacts@1
  displayName: 'Dropping'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- script: echo Started packing and pushing

- script: |
    if [ -d "$(Build.ArtifactStagingDirectory)/packages" ]; then
      echo "Packages directory exists, found the following files:"
      ls -la "$(Build.ArtifactStagingDirectory)/packages/"
    else
      echo "Packages directory does not exist at $(Build.ArtifactStagingDirectory)/packages"
      echo "Contents of staging directory:"
      ls -la "$(Build.ArtifactStagingDirectory)/"
      exit 1
    fi
  displayName: 'Verify Packages Directory'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Packages'
  condition: and(succeeded(), ne(variables['Agent.JobStatus'], 'Failed'))
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/packages'
    ArtifactName: 'packages'
    publishLocation: 'Container'

# Push nupkg files (snupkg symbols packages are automatically handled by NuGet)
- task: NuGetCommand@2
  displayName: 'Pushing to nuget.org'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/**/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'NuGet'
    allowPackageConflicts: true
